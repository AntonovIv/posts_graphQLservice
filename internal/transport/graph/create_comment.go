package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// // Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"log/slog"

	"github.com/AntonovIv/post_graphQlservice/graph/model"
	"github.com/AntonovIv/post_graphQlservice/internal/models"
	"github.com/AntonovIv/post_graphQlservice/internal/validation"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CreateCommentReq) (*model.Comment, error) {
	r.logger.DebugContext(ctx, "Create comment request")

	if err := validation.CreateCommentValidate(input); err != nil {
		r.logger.InfoContext(ctx, "create comment request: err",
			slog.Any("err", err))

		return nil, &gqlerror.Error{
			Message: "bad request: " + err.Error(),
		}
	}
	commentResp, err := r.postService.CreateComment(ctx, input)
	if errors.Is(err, models.ErrBadPostId) {
		r.logger.InfoContext(ctx, "create comment request: err",
			slog.Any("err", err))
		return nil, &gqlerror.Error{
			Message: "bad request: commenting not alowed",
		}
	}
	if err != nil {
		r.logger.ErrorContext(ctx, "Create comment request inernal err",
			slog.Any("err", err))

		return nil, &gqlerror.Error{
			Message: "internal server error",
		}
	}

	r.postService.NotifyObservers(commentResp.Post, *commentResp)

	return commentResp, nil
}
