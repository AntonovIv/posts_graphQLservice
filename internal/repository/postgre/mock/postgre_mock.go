// Code generated by MockGen. DO NOT EDIT.
// Source: internal\service\posts\service.go

// Package mock_posts is a generated GoMock package.
package mock_posts

import (
	context "context"
	reflect "reflect"

	model "github.com/AntonovIv/post_graphQlservice/graph/model"
	service "github.com/AntonovIv/post_graphQlservice/internal/service"
	gomock "github.com/golang/mock/gomock"
)

// MockpostRepo is a mock of postRepo interface.
type MockpostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockpostRepoMockRecorder
}

// MockpostRepoMockRecorder is the mock recorder for MockpostRepo.
type MockpostRepoMockRecorder struct {
	mock *MockpostRepo
}

// NewMockpostRepo creates a new mock instance.
func NewMockpostRepo(ctrl *gomock.Controller) *MockpostRepo {
	mock := &MockpostRepo{ctrl: ctrl}
	mock.recorder = &MockpostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostRepo) EXPECT() *MockpostRepoMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockpostRepo) CreateComment(arg0 context.Context, arg1 model.CreateCommentReq) (model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockpostRepoMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockpostRepo)(nil).CreateComment), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockpostRepo) CreatePost(arg0 context.Context, arg1 model.CreatePostReq) (model.PostListEl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(model.PostListEl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockpostRepoMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockpostRepo)(nil).CreatePost), arg0, arg1)
}

// GetAllPosts mocks base method.
func (m *MockpostRepo) GetAllPosts(arg0 context.Context) ([]model.PostListEl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", arg0)
	ret0, _ := ret[0].([]model.PostListEl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockpostRepoMockRecorder) GetAllPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockpostRepo)(nil).GetAllPosts), arg0)
}

// GetCommentsForPost mocks base method.
func (m *MockpostRepo) GetCommentsForPost(arg0 context.Context, arg1 *model.Post, arg2, arg3 int) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForPost", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsForPost indicates an expected call of GetCommentsForPost.
func (mr *MockpostRepoMockRecorder) GetCommentsForPost(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForPost", reflect.TypeOf((*MockpostRepo)(nil).GetCommentsForPost), arg0, arg1, arg2, arg3)
}

// GetPostByID mocks base method.
func (m *MockpostRepo) GetPostByID(arg0 context.Context, arg1 int) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", arg0, arg1)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockpostRepoMockRecorder) GetPostByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockpostRepo)(nil).GetPostByID), arg0, arg1)
}

// GetRepliesComments mocks base method.
func (m *MockpostRepo) GetRepliesComments(arg0 context.Context, arg1 *model.Comment, arg2, arg3 int) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesComments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesComments indicates an expected call of GetRepliesComments.
func (mr *MockpostRepoMockRecorder) GetRepliesComments(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesComments", reflect.TypeOf((*MockpostRepo)(nil).GetRepliesComments), arg0, arg1, arg2, arg3)
}

// WithTransaction mocks base method.
func (m *MockpostRepo) WithTransaction(ctx context.Context, fn service.TxFunc) error {
	// m.ctrl.T.Helper()
	// ret := m.ctrl.Call(m, "WithTransaction", ctx, fn)
	// ret0, _ := ret[0].(error)
	// return ret0
	return fn(ctx)
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockpostRepoMockRecorder) WithTransaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockpostRepo)(nil).WithTransaction), ctx, fn)
}

// MockObserverPool is a mock of ObserverPool interface.
type MockObserverPool struct {
	ctrl     *gomock.Controller
	recorder *MockObserverPoolMockRecorder
}

// MockObserverPoolMockRecorder is the mock recorder for MockObserverPool.
type MockObserverPoolMockRecorder struct {
	mock *MockObserverPool
}

// NewMockObserverPool creates a new mock instance.
func NewMockObserverPool(ctrl *gomock.Controller) *MockObserverPool {
	mock := &MockObserverPool{ctrl: ctrl}
	mock.recorder = &MockObserverPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserverPool) EXPECT() *MockObserverPoolMockRecorder {
	return m.recorder
}

// CreateObserver mocks base method.
func (m *MockObserverPool) CreateObserver(arg0 int) (int, chan *model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObserver", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(chan *model.Comment)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateObserver indicates an expected call of CreateObserver.
func (mr *MockObserverPoolMockRecorder) CreateObserver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObserver", reflect.TypeOf((*MockObserverPool)(nil).CreateObserver), arg0)
}

// DeleteObserver mocks base method.
func (m *MockObserverPool) DeleteObserver(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObserver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObserver indicates an expected call of DeleteObserver.
func (mr *MockObserverPoolMockRecorder) DeleteObserver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObserver", reflect.TypeOf((*MockObserverPool)(nil).DeleteObserver), arg0, arg1)
}

// NotifyObservers mocks base method.
func (m *MockObserverPool) NotifyObservers(arg0 int, arg1 model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyObservers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyObservers indicates an expected call of NotifyObservers.
func (mr *MockObserverPoolMockRecorder) NotifyObservers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyObservers", reflect.TypeOf((*MockObserverPool)(nil).NotifyObservers), arg0, arg1)
}
